"""The temperature controller mode"""
enum ControllerMode {
  """Use the manual settings"""
  manual

  """This controller is off"""
  off

  """Use the PID settings"""
  auto

  """Use the hysteria settings"""
  hysteria
}

enum SwitchMode {
  on
  off
}

scalar Time

"""The settings for hysteria mode"""
type HysteriaSettings {
  """Indicates if these settings have been configured yet."""
  configured: Boolean

  """The ID of an object"""
  id: ID!

  """When this temperature is hit, turn on the cooling output"""
  maxTemp: String

  """When this temperature is hit, turn on the heating output"""
  minTemp: String

  """The minimum amount of time to turn the outputs on for."""
  minTime: Int
}

"""The manual settings for this controller"""
type ManualSettings {
  """Indicates if these settings have been configured yet."""
  configured: Boolean

  """The time for one duty cycle in seconds"""
  cycleTime: Int

  """The manual duty cycle percentage for this controller"""
  dutyCycle: Int

  """The ID of an object"""
  id: ID!
}

type Mutation {
  assignProbe(name: String!, address: String!): TemperatureController
  removeProbeFromTemperatureController(address: String!): TemperatureController
  updateTemperatureController(controllerSettings: TemperatureControllerSettingsInput!): TemperatureController
  deleteTemperatureController(id: ID!): DeleteTemperatureControllerReturnType
  
  """Update the current system settings"""
  updateSettings(settings: SettingsInput!): Settings

  """
  Create or update a switch
  """
  modifySwitch(switchSettings: SwitchSettingsInput!): Switch
  """
  Delete a switch
  """
  deleteSwitch(id: ID!): Switch
  """
  Enable or disable a switch
  """
  toggleSwitch(id: ID!, mode: SwitchMode!): Switch
}

"""The settings for heating or cooling on a temperature controller"""
type PidSettings {
  """Indicates if these settings have been configured yet"""
  configured: Boolean

  """The automatic cycle time in seconds"""
  cycleTime: Int

  """The minimum delay between turning an output on and off in seconds"""
  delay: Int

  """The derivative calculation value"""
  derivative: Float

  """The ID of an object"""
  id: ID!

  """The integral calculation value"""
  integral: Float

  """The proportional calculation value"""
  proportional: Float

  """The GPIO"""
  gpio: String
}

"""Used to configure a controller"""
input TemperatureControllerSettingsInput {
  """The controller Id"""
  id: ID!

  """The name of the controller."""
  name: String

  """The new mode for the controller"""
  mode: ControllerMode

  """The PID Settings for the cooling output"""
  coolSettings: PidSettingsInput

  """The PID settings for the heating output"""
  heatSettings: PidSettingsInput

  """The hysteria settings for controlling this temperature controller"""
  hysteriaSettings: HysteriaSettingsInput

  """The manual settings for this temperature controller"""
  manualSettings: ManualSettingsInput

  """The target for auto mode"""
  setPoint: String
}

type Query {
  probe(address: String): TemperatureProbe

  """Get the list of probes"""
  probeList(available: Boolean): [TemperatureProbe]

  """Get a specific list of probes"""
  fetchProbes(addresses: [String]): [TemperatureProbe]

  """Fetch all the temperature controllers, or a subset by name"""
  temperatureControllers(name: String): [TemperatureController]

  """Fetch the current System Settings"""
  settings: Settings

  """Fetch switches that are configured"""
  switches: [Switch]
}

type TemperatureController {
  """
  The PID calculated duty cycle, this can be overriden by the ManualDuty in manual mode
  """
  calculatedDuty: Int

  """The cooling settings for this controller"""
  coolSettings: PidSettings

  """The percentage of time this controller is on"""
  dutyCycle: Int

  """The heating settings for this controller"""
  heatSettings: PidSettings

  """The hysteria mode settings for this controller"""
  hysteriaSettings: HysteriaSettings

  """The ID of an object"""
  id: ID!

  """The manual settings for this controller"""
  manualSettings: ManualSettings

  """The controller mode"""
  mode: ControllerMode

  """The assigned name of this controller"""
  name: String

  """The last time that the duty cycle was calculated"""
  previousCalculationTime: Time

  """The target temperature when in auto mode"""
  setPoint: String

  """The probes assigned to this controller"""
  tempProbeDetails: [TempProbeDetails]
}

"""A device that reads a temperature and is assigned to a temperature controller"""
type TempProbeDetails {
  """The ID of an object"""
  id: ID!

  """The physical address of this probe"""
  physAddr: String

  """The value of the reading"""
  reading: String

  """The friendly name of this probe"""
  name: String

  """The time that this reading was updated"""
  updated: Time
}

"""A device that reads a temperature"""
type TemperatureProbe {
  """The physical address of this probe"""
  physAddr: String

  """The value of the reading"""
  reading: String

  """The time that this reading was updated"""
  updated: Time
}


"""The new settings for hysteria mode"""
input HysteriaSettingsInput {
  """Indicates if these settings have been configured yet"""
  configured: Boolean

  """When this temperature is hit, turn on the cooling output"""
  maxTemp: String

  """When this temperature is hit, turn on the heating output"""
  minTemp: String

  """The minimum amount of time to turn the outputs on for."""
  minTime: Int
}

"""The new manual settings for this controller"""
input ManualSettingsInput {
  """Indicates if these settings have been configured yet"""
  configured: Boolean

  """The time for one duty cycle in seconds"""
  cycleTime: Int

  """The manual duty cycle percentage for this controller"""
  dutyCycle: Int
}

"""The settings for heating or cooling on a temperature controller"""
input PidSettingsInput {
  """Indicates if these settings have been configured yet"""
  configured: Boolean

  """The automatic cycle time in seconds"""
  cycleTime: Int

  """The minimum delay between turning an output on and off in seconds"""
  delay: Int

  """The derivative calculation value"""
  derivative: Float

  """The integral calculation value"""
  integral: Float

  """The proportional calculation value"""
  proportional: Float

  """The friendly name of the GPIO Value"""
  gpio: String
}

"""The deleted controller"""
type DeleteTemperatureControllerReturnType {
  """The ID of the deleted Controller"""
  id: ID!
  """Temperatures Probes that were associated with this controller"""
  temperatureProbes: [String]
}

"""The overall settings for this brewery"""
type Settings {
  """The current brewery name"""
  breweryName: String!
}

"""The new settings for this brewery"""
input SettingsInput {
  """The new brewery name (blank for no change)"""
  breweryName: String
}

type Switch {
  """The ID of the switch"""
  id: ID!
  """The GPIO for the pin"""
  gpio: String!
  """The name of the switch"""
  name: String!
  """The state of the switch"""
  state: SwitchMode!
}

input SwitchSettingsInput {
  """
  The Id of the switch, if no ID, create a new switch
  """
  id: ID
  """
  The new Name for the switch (required during switch creation)
  """
  name: String
  """
  The new GPIO for the switch (required during switch creation)
  """
  gpio: String
  """
  The new state for the switch
  """
  state: SwitchMode
}